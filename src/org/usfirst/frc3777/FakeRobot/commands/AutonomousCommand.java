// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3777.FakeRobot.commands;

import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc3777.FakeRobot.Robot;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.DoubleSolenoid.Value;

/**
 *
 */
public class AutonomousCommand extends Command {
	int count = 0;
	boolean finished = false;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public AutonomousCommand() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.drive);
        requires(Robot.pneumatics);
        requires(Robot.elevator);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	while(count <= 1000){
    		Robot.drive.robotDrive.tankDrive(-.5, -.5);
    		count++;
    	}
    	while(count <= 1445 && count > 999){
    		Robot.drive.robotDrive.tankDrive(-.5, .5);
    		count++;
    	}
    	while(count == 1445){
    		Robot.pneumatics.doubleSolenoid1.set(DoubleSolenoid.Value.kForward);
    		count++;
    	}
    	while(count == 1446){
    		Robot.pneumatics.doubleSolenoid1.set(DoubleSolenoid.Value.kReverse);
    		count++;
    	}
    	while(count >1446 && count <= 1600){
    		Robot.pneumatics.doubleSolenoid1.set(DoubleSolenoid.Value.kOff);
    		Robot.drive.robotDrive.tankDrive(-.5, .5);
    		count++;
    	}
    	
    	finished = true;
    }
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    	if(finished){
    		return true;
    	}
      return false;
    }    

    // Called once after isFinished returns true
    protected void end() {
		
	}

	// Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	count = 0;
    }
}
