// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3777.FakeRobot.commands;

import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc3777.FakeRobot.Robot;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.DoubleSolenoid.Value;

/**
 *
 */
public class AutonomousCommand extends Command {
	int count = 0;
	boolean finished = false;

    public AutonomousCommand() {

        requires(Robot.drive);
        requires(Robot.pneumatics);
        requires(Robot.elevator);

    }

    protected void initialize() {
    }

    protected void execute() {
   
    	
    	while(count <= 1000){
    		Robot.drive.robotDrive.tankDrive(-.5, -.5);
    		count++;
    	}
    	while(count <= 1500 && count >=999){
    		Robot.drive.robotDrive.tankDrive(-.5, .5);
    		count++;
    	}
    	while(count >= 1500 && count <= 1700){
    		Robot.pneumatics.doubleSolenoid1.set(DoubleSolenoid.Value.kReverse);
    		count++;
    	}
    	while(count >= 1700 && count <=1800){
    		Robot.pneumatics.doubleSolenoid1.set(DoubleSolenoid.Value.kForward);
    		count++;
    	}
    	while(count >=1800 && count <= 1801){
    		Robot.pneumatics.doubleSolenoid1.set(DoubleSolenoid.Value.kOff);
    		count++;
    	}
    	while(count >=1801 && count <=3000){
    		Robot.drive.robotDrive.tankDrive(-.5, -.5);
    		count++;

    	}
    	 	while(count >= 2999 && count <= 3050 ){
    		count++;
    		Robot.elevator.cANTalon1.pidWrite(0.5);
    		
    	 	}
    	finished = true;
    }
    protected boolean isFinished() {
    	if(finished){
    		return true;
    	}
      return false;
    }    

    protected void end() {
    	count = 0;
		
	}

   protected void interrupted() {
    	count = 0;
    }
}
