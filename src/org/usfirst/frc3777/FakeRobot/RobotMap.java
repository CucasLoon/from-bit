// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3777.FakeRobot;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.RobotDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static CANTalon elevatorCANTalon1;
    public static AnalogPotentiometer elevatorPotentiometer;
    public static DoubleSolenoid pneumaticsDoubleSolenoid1;
    public static CANTalon driveTalon1;
    public static CANTalon driveTalon2;
    public static CANTalon driveTalon3;
    public static CANTalon driveTalon4;
    public static RobotDrive driveRobotDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        elevatorCANTalon1 = new CANTalon(5);
        LiveWindow.addActuator("Elevator", "CAN Talon 1", elevatorCANTalon1);
        
        elevatorPotentiometer = new AnalogPotentiometer(0, 1.0, 0.0);
        LiveWindow.addSensor("Elevator", "Potentiometer", elevatorPotentiometer);
        
        pneumaticsDoubleSolenoid1 = new DoubleSolenoid(1, 1, 0);
        LiveWindow.addActuator("Pneumatics", "Double Solenoid 1", pneumaticsDoubleSolenoid1);
        
        driveTalon1 = new CANTalon(1);
        LiveWindow.addActuator("Drive", "Talon1", driveTalon1);
        
        driveTalon2 = new CANTalon(2);
        LiveWindow.addActuator("Drive", "Talon2", driveTalon2);
        
        driveTalon3 = new CANTalon(3);
        LiveWindow.addActuator("Drive", "Talon3", driveTalon3);
        
        driveTalon4 = new CANTalon(0);
        LiveWindow.addActuator("Drive", "Talon4", driveTalon4);
        
        driveRobotDrive = new RobotDrive(driveTalon1, driveTalon2,
              driveTalon3, driveTalon4);
        
        driveRobotDrive.setSafetyEnabled(true);
        driveRobotDrive.setExpiration(0.1);
        driveRobotDrive.setSensitivity(0.5);
        driveRobotDrive.setMaxOutput(1.0);
        driveRobotDrive.setInvertedMotor(RobotDrive.MotorType.kFrontLeft, true);
        driveRobotDrive.setInvertedMotor(RobotDrive.MotorType.kRearLeft, true);
        driveRobotDrive.setInvertedMotor(RobotDrive.MotorType.kFrontRight, true);
        driveRobotDrive.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
